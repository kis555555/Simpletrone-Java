import java.util.Scanner;

class Simple
{
	private int accumulator; // 레지스터이며 결과물이 계속 누적되서 저장됌
	private int memory[]; // 
	private int instructionRegister;	
	private int instructionCounter; // 현재 메모리의 위치
	private int operationCode; // 왼쪽 현재 명령어를 나타냄
	private int operand; // 현재 연산되는 메모리의 위치 (오른쪽)
	private int LargeNumber = 0; // 가장 큰 수를 저장함
	private int Count = 0; // 평균 값을 구하기 위한 변수
	
	public Simple()
	{
		display();
		initialise();
		runSimulator();
	}
	public void display()
	{
		System.out.println("*** Welcome to Simpletron! ***");
		System.out.println("*** Please enter your program one istruction ***");
		System.out.println("*** (or data word) at a time. I will type the ***");
		System.out.println("*** location number and a question mark (?) ***");
		System.out.println("*** You then type the word for that location. ***");	
		System.out.println("*** Type the sectinel -99999 to stop entering ***");
		System.out.println("*** your program ****");
	}
	public void runSimulator()
	{
		int submittedInstruction = 0; // 사용자가 입력한 현재 명령어
		int memoryPointer = 0;	// 메모리의 현재 위치
		
		Scanner input = new Scanner ( System.in );
		
		do
		{
			System.out.printf ("%d %s  ", memoryPointer, "?" );
			submittedInstruction = input.nextInt (); // 값을 입력
			if (submittedInstruction != -99999) // 현재 입력값이 -99999가 아니라면
			{
				memory[memoryPointer] = submittedInstruction; // 현재 메모리 위치에 값을 넣어줌
				memoryPointer++; // 메모리를 +1 해서 다음 메모리로 넘어감
			}
		}while(submittedInstruction != -99999); // -99999가 입력 되기 전까지 계속 반복함
		
		System.out.println("*** Program loading completed ***");
		System.out.println("*** Program execution begins ****");
		
		for ( int code : memory ) // 메모리만큼 반복문을 돈다
		{
			// System.out.println ("The value of memory location one is "+ code.getData () );
			// int sentinel = code.getData ();
			if ( code != 0 )	// 0이 아니라면 
			{
				load (); // 각 오른쪽, 왼쪽 2자리 숫자를 나누고 값을 넘겨줌
				execute (operand, operationCode); //operationCode는 연산자
			}
		}
	}
	
	public void initialise() // 프로그램 시작시 배열값, 현재 메모리 위치를 초기화를 해줌
	{
		memory = new int [100]; // 배열 초기화
		instructionCounter = 0;

	}
	
	public void load() // 각 명령어들을 저장 하기 위한 메소드
	{
		operationCode = memory [instructionCounter] / 100; // 왼쪽 2자리 숫자를 저장함
		operand = memory [instructionCounter] % 100; // 오른쪽 2자리 숫자를 저장함

	}
	
	public void execute (int operands, int operation) 
	{
		int SampleOperands;
		int tmp = 0;
		
		switch (operation) // 위에서 2자리 숫자로 나눈 값으로 다음 case 문을 시행
		{
			case 10: // 메모리를 삽입(Read)
				Scanner input = new Scanner ( System.in );
				System.out.print ( "operands에 삽입할 숫자를 입력하세요 : " );
				
				SampleOperands = input.nextInt();
				++Count;
				
				while (SampleOperands < -9999 || SampleOperands > 9999) // 일반적인 오버플로우 처리
				{
					System.out.println("OverFlow 또는 음수를 입력 하셨습니다.");
					System.out.print ( "operands에 삽입할 숫자를 입력하세요 : " );
					
					SampleOperands = input.nextInt();
				}
				
				
				/*while (SampleOperands < -9999 || SampleOperands > 9999) // 평균값 계산
				{
					System.out.println("OverFlow");
					if(Count < 0)
					{
						Count = 0;
					}
					SampleOperands = input.nextInt();
					++Count;
				}*/
				
				/*while (SampleOperands < 0 || SampleOperands > 9999) // a번 문제 양수만 입력 받을 시.
				{
					System.out.println("OverFlow 또는 음수를 입력 하셨습니다.");
					System.out.print ( "operands에 삽입할 숫자를 입력하세요 : " );
					
					SampleOperands = input.nextInt();
				}*/
				
				
				// 가장 큰 수 출력
				tmp = SampleOperands; // 값을 비교하기 위해 입력받은 값을 tmp에 저장함
				if(LargeNumber < tmp) // 값을 비교함
				{
					LargeNumber = tmp;
				}
				memory[operands] = SampleOperands; // operands 위치에 입력한 숫자를 넣음
				break;
			case 11:	// 메모리를 출력(Write)
				System.out.println ("The result of the operation is " + memory[operands]);
				// System.out.println("a LargeNumber Number is " + memory[operands]); // 가장 큰 수
				break;
			case 20: // 특정한 위치에 accumulator를 로드함 
				accumulator = memory [operands];
				break;
			case 21: 	// 누산기의 단어를 메모리의 특별한 위치에 저장
				memory[operands] = accumulator;
				// memory[operands] = LargeNumber;
				break;
			case 30: // 해당 메모리와 accumulaotor를 더함
				if (accumulator + memory[operands] > 9999 || accumulator + memory[operands] < -9999)
				{
					error("OverFlow");
				}
				else
				{
					accumulator += memory[operands];
				}
				break;
			case 31: // 해당 메모리와 accumulaotor를 뺌
				if (accumulator - memory[operands] > 9999 || accumulator - memory[operands] < -9999)
				{
					error("OverFlow");
				}
				else{
					accumulator -= memory[operands];
				}
				break;
			case 32:	// 해당 메모리와 accumulaotor를 나눔
				if (memory[operand] == 0)
				{
					error("Divide0");
				}
				else
				{
					accumulator /= Count; // 평균 구하기
					// accumulator /= memory[operands]; // 일반적인 나눗셈
				}
				break;
			case 33: // 해당 메모리와 accumulaotor를 곱함
				if (accumulator * memory[operands] > 9999 || accumulator * memory[operands] < -9999)
				{
					error("OverFlow");
				}
				else{
					accumulator *= memory[operands];
				}
				break;
			case 40:	// 현재 메모리 위치에 operands 를 넣어줌
				instructionCounter = operands;
				break;
			case 41: // 누산기가 음수이면 메모리의 특정 위치로 분기합니다.
				if (accumulator < 0)
					instructionCounter = operands; // instructionCounter은 현재 메모리 위치를 의미함
				break;
			case 42: // 누산기가 0이면 메모리의 특정 위치로 분기합니다.
				if (accumulator == 0)
					instructionCounter = operands;  // instructionCounter은 현재 메모리 위치를 의미함
				break;
			case 43: // 프로그램을 정지 시킴
				dumpTheCore();	// 프로그램을 정지 시키고 현재 메모리 상태를 보여주는 메소드를 호출
				System.out.printf ("\n%s\n", "The program has ended...");
				System.exit(0); // 프로그램 종료
				break;
		}
		
		instructionCounter++;	// 현재 메모리 위치를 다음으로 넘김 +1
	}
	public void error(String s) // 오버플로우 또는 나누는 값이 0 일 경우
	{
		if(s.equals("OverFlow")) // 오버플로우 인지 체크
		{
			System.out.println("Overflow 발생");
			instructionCounter = 100; // 메모리 사용량을 최대로 맞추고 종료함
			System.exit(0);
		}
		if(s.equals("Divide0")) // 나누는 값이 0 인지 체크
		{
			System.out.println("나누는 값이 0입니다.");
			instructionCounter = 100;
			System.exit(0);
		}
	}
	
	public void dumpTheCore ( )
	{
		System.out.printf ("\n%30s\n%30s\t%s%4d\n%30s\t%2d\n%30s\t%2d\n%30s\t%2d\n%30s\t%2d\n\n%30s\n", "REGISTERS:", 
				"accumulator", "+", accumulator, "instruction counter", instructionCounter, "instruction register",
			       	instructionCounter, "operation code", operationCode, "operand", operand, "MEMORY:" );

		// 메모리 번호를 가로 순서로 표시
		for (int i=0;i<10;i++)
		{
			System.out.printf("%6d", i);
		}

		System.out.println();
		int counter = 0;

		// 메모리를 수직 및 수평 순서로 모두 표시합니다.
		for (int i=0;i<10;i++) 
		{
			if (counter % 10 == 0)
				System.out.printf("%2d ", counter);
			for (int j=0;j<10;j++) 
			{	
				// Lets apply some formatting to improve the display
				if (memory[counter]== 0)
				{
					System.out.printf("%s%s", "+", "0000 ");
				}
				else
					System.out.printf ("%s%4d ", "+", memory [counter]);
				counter++;
			}
		System.out.println ();
		}
	}
}

public class Simpletron 
{
	public static void main(String[] args) 
	{
		 Simple s = new  Simple();
	}
}
